{
  "title": "VeeValidate server side validations",
  "date": "2020-02-01T13:00:00.000Z",
  "body": "*Originally published on [dev.to](https://dev.to/johanbaaij/veevalidate-server-side-validations-3bg1).*\n\n- - -\n\nIn this post we'll look at how to add a [VeeValidate](https://logaretm.github.io/vee-validate/overview.html) rule for validating a value with an API endpoint. A scenario where such a rule is useful could be checking if a username is unique.\n\nRather than displaying an error after the form is submitted, we'd like to inform the user right away that their username is already taken.\n\nWe'll start with this simple component using a `ValidationObserver` and `ValidationProvider`.\n\n```vue\n<template>\n  <ValidationObserver v-slot=\"{ invalid }\">\n    <ValidationProvider name=\"username\" rules=\"required\" v-slot=\"{ errors }\">\n      <p>\n        <input placeholder=\"username\" v-model=\"username\" type=\"text\">\n        <br>\n        <span id=\"error\">{{ errors[0] }}</span>\n      </p>\n    </ValidationProvider>\n    <button @click=\"sendForm\" :disabled=\"invalid\" type=\"button\">Submit</button>\n  </ValidationObserver>\n</template>\n\n<script>\nimport { ValidationProvider, ValidationObserver, extend } from \"vee-validate\";\nimport { required } from \"vee-validate/dist/rules\";\n\nextend(\"required\", {\n  ...required\n});\n\nexport default {\n  data: function() {\n    return {\n      username: null\n    };\n  },\n  components: {\n    ValidationProvider,\n    ValidationObserver\n  },\n  methods: {\n    sendForm() {\n      alert(`Thanks ${this.username}`)\n    }\n  }\n};\n</script>\n```\n\nLet's add the method that calls our API. For this example I'll use the Github API to look up usernames. The endpoint URI is `https://api.github.com/users/:username`. \n\nGithub returns a 404 when the username is not found, in our case that means the field is valid. Whatever your situation is, this method should return `true` if valid and `false` if not.\n\n```javascript\nexport default {\n  // ...\n  methods: {\n    async isUsernameUnique() {\n      try {\n        const response = await axios.get(\n          `https://api.github.com/users/${this.username}`\n        );\n        return false;\n      } catch (err) {\n        if (err.response.status === 404) {\n          return true;\n        }\n      }\n    }\n  }\n  // ...\n}\n```\n\nNow that we have the method in place we can tell VeeValidate to use it in our new rule.\n\n```javascript\nexport default {\n  // ...\n  mounted() {\n    extend(\"unique\", {\n      validate: this.isUsernameUnique,\n      message: \"Username already taken\"\n    });\n  }\n  // ...\n}\n```\n\nLastly, we add the rule to the `ValidationProvider`.\n\n```html\n<ValidationProvider name=\"username\" rules=\"required|unique\" :debounce=\"500\" v-slot=\"{ errors }\">\n  <p>\n    <input placeholder=\"username\" v-model=\"username\" type=\"text\">\n    <br>\n    <span id=\"error\">{{ errors[0] }}</span>\n  </p>\n</ValidationProvider>\n```\n\nNote that I've added a `:debounce` attribute. This ensures we won't be overflowing the API with requests at every keypress but rather every 500ms.\n\nYou can find the entire source code for this example on CodeSandbox.\n\n[![Edit vee-validate-api-validation-example](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/fervent-moon-yoi2s?fontsize=14&hidenavigation=1&theme=dark)\n\n## Using `handleSubmit`\n\nTo prevent the user from sending the form before we have heard back from our API we can use `handleSubmit`. It takes our own `sendForm` method as an argument and using it is very straightforward.\n\n```html\n<ValidationObserver v-slot=\"{ invalid, handleSubmit }\">\n  <!-- the rest of our form -->\n  <button @click=\"handleSubmit(sendForm)\" :disabled=\"invalid\" type=\"button\">Submit</button>\n</ValidationObserver>\n```\n\nHopefully this simple example will be useful for writing your own server side validation rules.",
  "tags": [
    "vue.js",
    "veevalidate",
    "async/await",
    "javascript"
  ]
}